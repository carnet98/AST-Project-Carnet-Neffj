void DCEMarker0_(void);
void DCEMarker1_(void);
void DCEMarker2_(void);
/*
 * This is a RANDOMLY GENERATED PROGRAM.
 *
 * Generator: csmith 2.3.0
 * Git version: 30dccd7
 * Options:   --no-unions --safe-math --no-argc --no-volatiles
 * --no-volatile-pointers --arrays --bitfields --no-checksum --comma-operators
 * --compound-assignment --no-consts --no-divs --embedded-assigns --jumps
 * --longlong --no-force-non-uniform-arrays --math64 --no-muls --packed-struct
 * --paranoid --pointers --structs --inline-function --no-return-structs
 * --no-arg-structs --no-dangling-global-pointers Seed:      4221436548
 */

#include "csmith.h"

static volatile uint64_t csmith_sink_ = 0;

static long __undefined;

/* --- Struct/Union Declarations --- */
/* --- GLOBAL VARIABLES --- */
static int32_t g_6[10][9][2] = {{{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}, {{0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}, {0x687FD074L, 0x59C45C1DL}}};


/* --- FORWARD DECLARATIONS --- */
inline static int64_t  func_1(void);
static int32_t * func_2(uint32_t  p_3);


/* --- FUNCTIONS --- */
/* ------------------------------------------ */
/* 
 * reads : g_6
 * writes:
 */
inline static int64_t  func_1(void)
{ /* block id: 0 */
    int32_t l_4[10] = {8L, (-1L), 8L, (-1L), 8L, (-1L), 8L, (-1L), 8L, (-1L)};
    int32_t *l_8 = &g_6[9][7][0];
    int32_t **l_7 = &l_8;
    int i;
    (*l_7) = func_2(l_4[0]);
    /* statement id: 3 */
    assert (l_8 == 0 || (l_8 >= &g_6[0][0][0] && l_8 <= &g_6[9][8][1]));
    return g_6[4][1][0];
}


/* ------------------------------------------ */
/* 
 * reads :
 * writes:
 */
static int32_t * func_2(uint32_t  p_3)
{ /* block id: 1 */
    int32_t *l_5[5][9][5] = {{{(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}}, {{(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}}, {{(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}}, {{(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}}, {{(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}, {(void*)0, &g_6[5][3][0], &g_6[7][0][1], &g_6[2][6][1], &g_6[5][3][0]}}};
    int i, j, k;
    return l_5[2][2][4];
    /* statement id: 2 */
    //assert (func_2_rv == 0 || (func_2_rv >= &g_6[0][0][0] && func_2_rv <= &g_6[9][8][1]));
}




/* ---------------------------------------- */
int main (void)
{
    int i, j, k;
    int print_hash_value = 0;
    platform_main_begin();
    func_1();
    for (i = 0; i < 10; i++) {
      DCEMarker0_();
      for (j = 0; j < 9; j++) {
        DCEMarker1_();
        for (k = 0; k < 2; k++) {
          DCEMarker2_();
          csmith_sink_ = g_6[i][j][k];
        }
      }
    }
    platform_main_end(0,0);
    return 0;
}

/************************ statistics *************************
XXX max struct depth: 0
breakdown:
   depth: 0, occurrence: 2
XXX total union variables: 0

XXX non-zero bitfields defined in structs: 0
XXX zero bitfields defined in structs: 0
XXX const bitfields defined in structs: 0
XXX volatile bitfields defined in structs: 0
XXX structs with bitfields in the program: 0
breakdown:
XXX full-bitfields structs in the program: 0
breakdown:
XXX times a bitfields struct's address is taken: 0
XXX times a bitfields struct on LHS: 0
XXX times a bitfields struct on RHS: 0
XXX times a single bitfield on LHS: 0
XXX times a single bitfield on RHS: 0

XXX max expression depth: 2
breakdown:
   depth: 1, occurrence: 3
   depth: 2, occurrence: 1

XXX total number of pointers: 3

XXX times a variable address is taken: 76
XXX times a pointer is dereferenced on RHS: 0
breakdown:
XXX times a pointer is dereferenced on LHS: 1
breakdown:
   depth: 1, occurrence: 1
XXX times a pointer is compared with null: 0
XXX times a pointer is compared with address of another variable: 0
XXX times a pointer is compared with another pointer: 0
XXX times a pointer is qualified to be dereferenced: 0

XXX max dereference level: 1
breakdown:
   level: 0, occurrence: 0
   level: 1, occurrence: 1
XXX number of pointers point to pointers: 1
XXX number of pointers point to scalars: 2
XXX number of pointers point to structs: 0
XXX percent of pointers has null in alias set: 66.7
XXX average alias set size: 1.67

XXX times a non-volatile is read: 4
XXX times a non-volatile is write: 2
XXX times a volatile is read: 0
XXX    times read thru a pointer: 0
XXX times a volatile is write: 0
XXX    times written thru a pointer: 0
XXX times a volatile is available for access: 0
XXX percentage of non-volatile access: 100

XXX forward jumps: 0
XXX backward jumps: 0

XXX stmts: 3
XXX max block depth: 0
breakdown:
   depth: 0, occurrence: 3

XXX percentage a fresh-made variable is used: 66.7
XXX percentage an existing variable is used: 33.3
FYI: the random generator makes assumptions about the integer size. See platform.info for more details.
********************* end of statistics **********************/


